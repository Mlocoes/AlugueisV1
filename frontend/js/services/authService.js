/**
 * Servi√ßo de autentica√ß√£o
 * Gerencia login, logout e verifica√ß√£o de token
 */

class AuthService {
    constructor() {
        this.token = null;
        this.usuario = null;
        this.tipo = null;
        this.tokenKey = 'sistema_alquileres_token';
        this.userKey = 'sistema_alquileres_user';

        // N√ÉO carregar token automaticamente - ser√° feito pelo loginManager
        console.log('üîê AuthService inicializado - aguardando valida√ß√£o manual');
    }

    /**
     * Realizar login
     */
    async login(usuario, senha) {
        try {
            // Usar ApiService para mantener consistencia con proxy
            if (!window.apiService) {
                throw new Error('ApiService n√£o dispon√≠vel');
            }
            
            const response = await window.apiService.post('/api/auth/login', {
                usuario: usuario,
                senha: senha
            });

            if (response.success && response.data) {
                const data = response.data;
                // Salvar dados de autentica√ß√£o APENAS na mem√≥ria da sess√£o
                this.token = data.access_token;
                this.usuario = data.usuario;
                this.tipo = data.tipo_usuario;  // API usa 'tipo_usuario' n√£o 'tipo'

                console.log('üîê Dados de login configurados:', {
                    hasToken: !!this.token,
                    tokenLength: this.token ? this.token.length : 0,
                    usuario: this.usuario,
                    tipo: this.tipo
                });

                // N√ÉO salvar no localStorage para for√ßar login a cada recarregamento
                console.log('üîê Dados salvos apenas na sess√£o (n√£o no localStorage)');

                return {
                    success: true,
                    token: this.token,
                    usuario: this.usuario,
                    tipo: this.tipo
                };
            } else {
                throw new Error(response.error || 'Erro no login');
            }
        } catch (error) {
            console.error('Erro no login:', error);
            this.clearSession();
            throw error;
        }
    }

    /**
     * Limpar dados da sess√£o
     */
    clearSession() {
        this.token = null;
        this.usuario = null;
        this.tipo = null;
    }

    /**
     * Realizar logout
     */
    logout() {
        console.log('üö™ Fazendo logout...');
        
        // Limpar dados da sess√£o
        this.clearSession();
        
        // Limpar localStorage caso exista algo
        try {
            localStorage.removeItem(this.tokenKey);
            localStorage.removeItem(this.userKey);
        } catch (error) {
            console.warn('Erro ao limpar localStorage:', error);
        }

        console.log('‚úÖ Logout realizado com sucesso');
        return { success: true };
    }

    /**
     * Restaurar datos de autenticaci√≥n desde localStorage
     */
    restoreFromLocalStorage() {
        try {
            const token = localStorage.getItem('token');
            const userDataString = localStorage.getItem('userData');
            
            if (token && userDataString && userDataString !== 'undefined' && userDataString !== 'null') {
                const userData = JSON.parse(userDataString);
                
                this.token = token;
                this.usuario = userData.usuario;
                this.tipo = userData.tipo;
                
                console.log('üîÑ Dados restaurados do localStorage:', {
                    hasToken: !!this.token,
                    usuario: this.usuario,
                    tipo: this.tipo
                });
                
                return true;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao restaurar dados do localStorage:', error);
        }
        
        return false;
    }

    /**
     * Verificar se o usu√°rio est√° autenticado
     */
    isAuthenticated() {
        const hasToken = !!this.token;
        const hasUser = !!this.usuario;
        console.log(`üîç Verifica√ß√£o de autentica√ß√£o: ${hasToken && hasUser ? 'Autenticado' : 'N√£o autenticado'}`);
        return hasToken && hasUser;
    }

    /**
     * Verificar se h√° token
     */
    hasToken() {
        return !!this.token;
    }

    /**
     * Obter usu√°rio atual
     */
    getUsuario() {
        return this.usuario;
    }

    /**
     * Verificar se h√° dados salvos
     */
    hasSavedData() {
        try {
            return localStorage.getItem(this.tokenKey) !== null;
        } catch (error) {
            console.warn('Erro ao verificar localStorage:', error);
            return false;
        }
    }

    /**
     * Obter header de autoriza√ß√£o
     */
    getAuthHeader() {
        if (this.token) {
            return `Bearer ${this.token}`;
        }
        return null;
    }

    /**
     * Obter headers de autoriza√ß√£o como objeto
     */
    getAuthHeaderObject() {
        if (this.token) {
            return {
                'Authorization': `Bearer ${this.token}`
            };
        }
        return {};
    }

    /**
     * Obter dados do usu√°rio
     */
    getUserData() {
        return {
            usuario: this.usuario,
            tipo: this.tipo,
            token: this.token
        };
    }

    /**
     * Salvar token no localStorage (n√£o usado nesta pol√≠tica)
     */
    saveTokenToStorage() {
        // Intencionalmente vazio - n√£o salvar no localStorage
        console.log('üö´ N√£o salvando no localStorage - pol√≠tica de seguran√ßa');
    }

    /**
     * Carregar token do localStorage (n√£o usado nesta pol√≠tica)
     */
    loadTokenFromStorage() {
        // Intencionalmente vazio - n√£o carregar do localStorage
        console.log('üö´ N√£o carregando do localStorage - pol√≠tica de seguran√ßa');
        return false;
    }

    /**
     * Validar token com o servidor
     */
    async validateToken() {
        try {
            if (!this.token) {
                console.log('üîç Sem token para validar');
                return false;
            }

            if (!window.apiService) {
                console.warn('ApiService n√£o dispon√≠vel para valida√ß√£o');
                return false;
            }

            const response = await window.apiService.get('/api/auth/verify');
            
            if (response.success) {
                console.log('‚úÖ Token v√°lido');
                return true;
            } else {
                console.log('‚ùå Token inv√°lido');
                this.clearSession();
                return false;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao validar token:', error);
            
            // Se for erro 401 ou 403, token √© inv√°lido
            if (error.message && (error.message.includes('401') || error.message.includes('403'))) {
                console.log('‚ùå Token expirado ou inv√°lido');
                this.clearSession();
                return false;
            }
            
            // Para outros erros (conectividade, etc), manter sess√£o temporariamente
            console.log('üîÑ Erro de conectividade, mantendo sess√£o local');
            return false; // N√£o v√°lido, mas n√£o limpa sess√£o
        }
    }

    /**
     * Limpar storage completamente
     */
    clearStorage() {
        try {
            localStorage.removeItem(this.tokenKey);
            localStorage.removeItem(this.userKey);
            console.log('üßπ Storage limpo');
        } catch (error) {
            console.warn('Erro ao limpar storage:', error);
        }
    }
}

// Inicializar servi√ßo globalmente
window.authService = new AuthService();
