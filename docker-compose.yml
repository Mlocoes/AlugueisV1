services:
  # Base de datos PostgreSQL especializada para alquileres V2
  postgres_v1:
    image: postgres:15
    container_name: algueisV1_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_v1_data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    ports:
      - "5432:5432"  # Puerto estándar de PostgreSQL
    networks:
      - algueisV1_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alugueisv1_usuario -d alugueisv1_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Adminer para gestión de base de datos
  adminer_v1:
    image: adminer:latest
    container_name: algueisV1_adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres_v1
      ADMINER_DESIGN: pepa-linha
    ports:
      - "8080:8080"  # Puerto diferente al sistema V1
    networks:
      - algueisV1_network
    depends_on:
      postgres_v1:
        condition: service_healthy
    restart: unless-stopped

  # Backend FastAPI
  backend_v1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: algueisV1_backend
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      CORS_ORIGINS: ${CORS_ORIGINS}
    volumes:
      - ./backend:/app

    ports:
      - "8000:8000"
    networks:
      - algueisV1_network
    depends_on:
      postgres_v1:
        condition: service_healthy
    restart: unless-stopped

  # Frontend Optimizado
  frontend_v1:
    image: nginx:alpine
    container_name: algueisV1_frontend
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx-frontend.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "3000:80"
    networks:
      - algueisV1_network
    depends_on:
      - backend_v1
    restart: unless-stopped

volumes:
  postgres_v1_data:
    driver: local

networks:
  algueisV1_network:
    driver: bridge
